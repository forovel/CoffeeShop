// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StayGreen.Models.Context;

namespace StayGreen.Models.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181213172545_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("StayGreen.Models.Schema.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AttachmentGroupId");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)))
                        .HasColumnName("CreatedById")
                        .HasColumnType("varchar(512)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateCreated")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateUpdated")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnName("Path")
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("UpdatedById")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)))
                        .HasColumnName("UpdatedById")
                        .HasColumnType("varchar(512)");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentGroupId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("StayGreen.Models.Schema.AttachmentCoffee", b =>
                {
                    b.Property<Guid>("AttachmentId");

                    b.Property<Guid>("CoffeeId");

                    b.HasKey("AttachmentId", "CoffeeId");

                    b.HasIndex("CoffeeId");

                    b.ToTable("AttachmentsCoffee");
                });

            modelBuilder.Entity("StayGreen.Models.Schema.AttachmentGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)))
                        .HasColumnName("CreatedById")
                        .HasColumnType("varchar(512)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateCreated")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateUpdated")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("UpdatedById")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)))
                        .HasColumnName("UpdatedById")
                        .HasColumnType("varchar(512)");

                    b.HasKey("Id");

                    b.ToTable("AttachmentGroups");
                });

            modelBuilder.Entity("StayGreen.Models.Schema.Coffee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Bitterness")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Bitterness")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Category")
                        .HasColumnName("Category")
                        .HasColumnType("int");

                    b.Property<int>("CoffeeCategory")
                        .HasColumnName("CoffeeCategory")
                        .HasColumnType("int");

                    b.Property<int>("CoffeeRegion")
                        .HasColumnName("CoffeeRegion")
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)))
                        .HasColumnName("CreatedById")
                        .HasColumnType("varchar(512)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateCreated")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateUpdated")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasColumnType("nvarchar(4000)");

                    b.Property<double?>("Discount");

                    b.Property<int>("Fortress")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Fortress")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(512)");

                    b.Property<double?>("Prise");

                    b.Property<int>("Saturation")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Saturation")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Sour")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Sour")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("UpdatedById")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)))
                        .HasColumnName("UpdatedById")
                        .HasColumnType("varchar(512)");

                    b.HasKey("Id");

                    b.ToTable("Coffee");
                });

            modelBuilder.Entity("StayGreen.Models.Schema.CoffeePreparation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AttachmentId");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)))
                        .HasColumnName("CreatedById")
                        .HasColumnType("varchar(512)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateCreated")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateUpdated")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("UpdatedById")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)))
                        .HasColumnName("UpdatedById")
                        .HasColumnType("varchar(512)");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.ToTable("CoffeePreparations");
                });

            modelBuilder.Entity("StayGreen.Models.Schema.CoffeePreparationCoffee", b =>
                {
                    b.Property<Guid>("CoffeeId");

                    b.Property<Guid>("CoffeePreparationId");

                    b.Property<int>("CoffeeRoasting");

                    b.HasKey("CoffeeId", "CoffeePreparationId");

                    b.HasIndex("CoffeePreparationId");

                    b.ToTable("CoffeePreparationsCoffee");
                });

            modelBuilder.Entity("StayGreen.Models.Schema.CoffeePrise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CoffeeId");

                    b.Property<int>("CoffeeWeight")
                        .HasColumnName("CoffeeWeight")
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)))
                        .HasColumnName("CreatedById")
                        .HasColumnType("varchar(512)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateCreated")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateUpdated")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<double>("Prise")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Prise")
                        .HasColumnType("float(53)")
                        .HasDefaultValue(0.0);

                    b.Property<string>("UpdatedById")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)))
                        .HasColumnName("UpdatedById")
                        .HasColumnType("varchar(512)");

                    b.HasKey("Id");

                    b.HasIndex("CoffeeId");

                    b.ToTable("CoffeePrises");
                });

            modelBuilder.Entity("StayGreen.Models.Schema.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("Address")
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)))
                        .HasColumnName("CreatedById")
                        .HasColumnType("varchar(512)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateCreated")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateUpdated")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("Email")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("FirstName")
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("LastName")
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("OrderStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrderStatus")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnName("PhoneNumber")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnName("PostCode")
                        .HasColumnType("varchar(15)");

                    b.Property<int>("TotalAmount")
                        .HasColumnName("TotalAmount")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnName("TotalPrice")
                        .HasColumnType("float(53)");

                    b.Property<string>("UpdatedById")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)))
                        .HasColumnName("UpdatedById")
                        .HasColumnType("varchar(512)");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("StayGreen.Models.Schema.OrderedCoffee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("int");

                    b.Property<Guid?>("AttachmentId");

                    b.Property<Guid?>("CoffeeId");

                    b.Property<double>("CoffeePrise")
                        .HasColumnName("CoffeePrise")
                        .HasColumnType("float(53)");

                    b.Property<int>("CoffeeRoasting")
                        .HasColumnName("CoffeeRoasting")
                        .HasColumnType("int");

                    b.Property<int>("CoffeeWeight")
                        .HasColumnName("CoffeeWeight")
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)))
                        .HasColumnName("CreatedById")
                        .HasColumnType("varchar(512)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateCreated")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateUpdated")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("OrderId");

                    b.Property<string>("UpdatedById")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)))
                        .HasColumnName("UpdatedById")
                        .HasColumnType("varchar(512)");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("CoffeeId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderedCoffee");
                });

            modelBuilder.Entity("StayGreen.Models.Schema.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("Index_RoleName");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("StayGreen.Models.Schema.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("StayGreen.Models.Schema.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("FirstName")
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .HasColumnName("LastName")
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("Index_Email")
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("StayGreen.Models.Schema.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("StayGreen.Models.Schema.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("StayGreen.Models.Schema.UserRole", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.Property<Guid?>("RoleId1");

                    b.Property<Guid?>("UserId1");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId1");

                    b.HasIndex("UserId1");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("StayGreen.Models.Schema.UserToken", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("StayGreen.Models.Schema.Attachment", b =>
                {
                    b.HasOne("StayGreen.Models.Schema.AttachmentGroup", "AttachmentGroup")
                        .WithMany("Attachments")
                        .HasForeignKey("AttachmentGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StayGreen.Models.Schema.AttachmentCoffee", b =>
                {
                    b.HasOne("StayGreen.Models.Schema.Attachment", "Attachment")
                        .WithMany("AttachmentsCoffee")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StayGreen.Models.Schema.Coffee", "Coffee")
                        .WithMany("AttachmentsCoffee")
                        .HasForeignKey("CoffeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StayGreen.Models.Schema.CoffeePreparation", b =>
                {
                    b.HasOne("StayGreen.Models.Schema.Attachment", "Attachment")
                        .WithMany("CoffeePreparations")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("StayGreen.Models.Schema.CoffeePreparationCoffee", b =>
                {
                    b.HasOne("StayGreen.Models.Schema.Coffee", "Coffee")
                        .WithMany("CoffeePreparationCoffee")
                        .HasForeignKey("CoffeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StayGreen.Models.Schema.CoffeePreparation", "CoffeePreparation")
                        .WithMany("CoffeePreparationCoffee")
                        .HasForeignKey("CoffeePreparationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StayGreen.Models.Schema.CoffeePrise", b =>
                {
                    b.HasOne("StayGreen.Models.Schema.Coffee", "Coffee")
                        .WithMany("CoffeePrises")
                        .HasForeignKey("CoffeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StayGreen.Models.Schema.OrderedCoffee", b =>
                {
                    b.HasOne("StayGreen.Models.Schema.Attachment", "Attachment")
                        .WithMany("OrderedCoffee")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("StayGreen.Models.Schema.Coffee", "Coffee")
                        .WithMany("OrderedCoffee")
                        .HasForeignKey("CoffeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("StayGreen.Models.Schema.Order", "Order")
                        .WithMany("OrderedCoffee")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StayGreen.Models.Schema.RoleClaim", b =>
                {
                    b.HasOne("StayGreen.Models.Schema.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StayGreen.Models.Schema.UserClaim", b =>
                {
                    b.HasOne("StayGreen.Models.Schema.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StayGreen.Models.Schema.UserLogin", b =>
                {
                    b.HasOne("StayGreen.Models.Schema.User", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StayGreen.Models.Schema.UserRole", b =>
                {
                    b.HasOne("StayGreen.Models.Schema.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StayGreen.Models.Schema.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId1");

                    b.HasOne("StayGreen.Models.Schema.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StayGreen.Models.Schema.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("StayGreen.Models.Schema.UserToken", b =>
                {
                    b.HasOne("StayGreen.Models.Schema.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
